#!/usr/bin/env python3

from __future__ import annotations

import gc
import logging
import os
import platform
import sys
import warnings
from collections.abc import Callable
from pathlib import Path
from typing import Any

import torch
from PIL import Image

warnings.filterwarnings("ignore")
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("pipeline")

# ---------------------------------------------------------------------------------
# –ü—É—Ç–∏ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
# ---------------------------------------------------------------------------------
THIS_DIR = Path(__file__).resolve().parent
ROOT_DIR = THIS_DIR.parents[1]
HY3D_ROOT = ROOT_DIR / "Hunyuan3D-2.1"

# –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥—É–ª–∏ –∏–∑ Hunyuan3D-2.1 (hy3dshape, hy3dpaint, torchvision_fix)
sys.path.insert(0, str(HY3D_ROOT))
# –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏ –ø–∞–∫–µ—Ç–æ–≤
sys.path.insert(0, str(HY3D_ROOT / "hy3dshape"))
sys.path.insert(0, str(HY3D_ROOT / "hy3dpaint"))


def _ensure_torch_lib_on_path() -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞–º PyTorch –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é `torch/lib` –≤ `LD_LIBRARY_PATH` (Linux) –∏–ª–∏
    `DYLD_LIBRARY_PATH` (macOS), —á—Ç–æ–±—ã –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–≥–ª–∏
    –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.

    Returns:
        None
    """
    try:
        torch_lib_dir = Path(torch.__file__).parent / "lib"
        if not torch_lib_dir.exists():
            return
        if platform.system() == "Darwin":
            key = "DYLD_LIBRARY_PATH"
        elif os.name == "posix":
            key = "LD_LIBRARY_PATH"
        else:
            key = None
        if key:
            current = os.environ.get(key, "")
            paths = [p for p in current.split(":") if p]
            if str(torch_lib_dir) not in paths:
                os.environ[key] = f"{current}:{torch_lib_dir}" if current else str(torch_lib_dir)
    except Exception:
        pass


def _try_import_mesh_uv_wrap() -> Callable[[Any], Any] | None:
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é `mesh_uv_wrap`, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω.

    Returns:
        Callable[[Any], Any] | None
    """
    try:
        from importlib import import_module

        module = import_module("hy3dpaint.utils.uvwrap_utils")
        return getattr(module, "mesh_uv_wrap", None)
    except Exception:
        return None


def _apply_torchvision_fix_if_available() -> None:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–∫—Å—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–∑ `torchvision_fix`, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.

    –§–∞–π–ª –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ `Hunyuan3D-2.1`.
    """
    try:
        from torchvision_fix import apply_fix  # type: ignore[import-not-found]  # pyright: ignore[reportMissingImports]

        apply_fix()
    except Exception:
        # –ù–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ –≤ —Ñ–∞—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        logger.exception("torchvision_fix not applied")


_ensure_torch_lib_on_path()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
if torch.cuda.is_available():
    device = torch.device("cuda")
    # –õ—É—á—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –Ω–∞ CUDA
    os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
    try:
        logger.info(f"üéÆ GPU: {torch.cuda.get_device_name(0)}")
        logger.info(f"üíæ VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    except Exception:
        logger.debug("Failed to extend torch lib path", exc_info=True)
elif getattr(torch.backends, "mps", None) and torch.backends.mps.is_available():
    device = torch.device("mps")
else:
    device = torch.device("cpu")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è pipeline
shape_pipeline = None
paint_pipeline = None
image_gen_pipeline = None


def clear_memory() -> None:
    """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å GPU –∏ CPU.

    Returns:
        None
    """
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
        torch.cuda.synchronize()
    gc.collect()
    logger.info("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")


# -----------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –º–µ—à–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫–∏
# -----------------------------------------------------------------------------


def simplify_mesh_and_rewrap(input_glb: str, output_glb: str, target_count: int) -> str:
    """–£–ø—Ä–æ—â–∞–µ—Ç –º–µ—à –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏ –∑–∞–Ω–æ–≤–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç UV.

    –í–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `trimesh` –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏ `mesh_uv_wrap` –∏–∑
    `hy3dpaint.utils.uvwrap_utils` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞–∑–≤—ë—Ä—Ç–∫–∏.  –ï—Å–ª–∏ —á–∏—Å–ª–æ –≥—Ä–∞–Ω–µ–π
    –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ—à–∞ —É–∂–µ –º–µ–Ω—å—à–µ `target_count`, —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª.

    Args:
        input_glb: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É GLB (–∏–ª–∏ OBJ) —Ñ–∞–π–ª—É.
        output_glb: –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π GLB.
        target_count: –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.

    Returns:
        –ü—É—Ç—å –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É GLB.
    """
    import trimesh  # type: ignore[import-not-found]  # pyright: ignore[reportMissingImports]

    # –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–≤—ë—Ä—Ç–∫–∏ UV
    mesh_uv_wrap = _try_import_mesh_uv_wrap()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—à (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ GLB, —Ç–∞–∫ –∏ OBJ)
    mesh: Any = trimesh.load(input_glb)

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ —Å—Ü–µ–Ω–∞,
    # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –µ–¥–∏–Ω—ã–π Trimesh.  –ò–Ω–∞—á–µ —É —Å—Ü–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    # –∞—Ç—Ä–∏–±—É—Ç faces, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É.
    if isinstance(mesh, trimesh.Scene):
        mesh = mesh.dump(concatenate=True)

    face_num = len(mesh.faces)
    if face_num > target_count:
        # –£–ø—Ä–æ—â–∞–µ–º –º–µ—à –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        mesh = mesh.simplify_quadratic_decimation(target_count)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º UV, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–µ–≥–ª–∏ –Ω–∞ –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é —Ç–æ–ø–æ–ª–æ–≥–∏—é
    if callable(mesh_uv_wrap):
        try:
            mesh = mesh_uv_wrap(mesh)  # type: ignore[misc]
        except Exception:
            logger.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫–µ UV. –ú–µ—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UV.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º–µ—à
    mesh.export(output_glb)
    return output_glb


def load_shape_pipeline() -> Any | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã.

    Returns:
        Any | None
    """
    global shape_pipeline
    if shape_pipeline is None:
        logger.info("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º shape pipeline...")
        clear_memory()
        _apply_torchvision_fix_if_available()
        try:
            # –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–µ–Ω–∏–≤–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–µ—Ä–∞ —É –ª–∏–Ω—Ç–µ—Ä–∞
            from hy3dshape.pipelines import (  # type: ignore[import-not-found]  # pyright: ignore[reportMissingImports]
                Hunyuan3DDiTFlowMatchingPipeline,
            )

            shape_pipe = Hunyuan3DDiTFlowMatchingPipeline.from_pretrained("tencent/Hunyuan3D-2.1")
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            try:
                shape_pipe = shape_pipe.to(device)
            except Exception:
                pass
            shape_pipeline = shape_pipe
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ shape pipeline")
            return None
        logger.info("‚úÖ Shape pipeline –∑–∞–≥—Ä—É–∂–µ–Ω")
    return shape_pipeline


def load_paint_pipeline() -> Any | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        Any | None
    """
    global paint_pipeline
    if paint_pipeline is None:
        logger.info("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º paint pipeline...")
        clear_memory()
        try:
            _apply_torchvision_fix_if_available()
            # –ò–º–ø–æ—Ä—Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–µ–Ω–∏–≤–æ
            from hy3dpaint.textureGenPipeline import (  # type: ignore[import-not-found]  # pyright: ignore[reportMissingImports]
                Hunyuan3DPaintConfig,
                Hunyuan3DPaintPipeline,
            )

            max_num_view = 6
            resolution = 512
            conf = Hunyuan3DPaintConfig(max_num_view, resolution)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π/—á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            realesrgan_ckpt = HY3D_ROOT / "hy3dpaint/ckpt/RealESRGAN_x4plus.pth"
            if realesrgan_ckpt.exists():
                conf.realesrgan_ckpt_path = str(realesrgan_ckpt)
            conf.multiview_cfg_path = str(HY3D_ROOT / "hy3dpaint/cfgs/hunyuan-paint-pbr.yaml")
            conf.custom_pipeline = str(HY3D_ROOT / "hy3dpaint/hunyuanpaintpbr")

            paint_pipeline_obj = Hunyuan3DPaintPipeline(conf)
            paint_pipeline = paint_pipeline_obj
            logger.info("‚úÖ Paint pipeline –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ paint pipeline")
            return None
    return paint_pipeline


def load_image_gen_pipeline() -> Any | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    Returns:
        Any | None
    """
    global image_gen_pipeline
    if image_gen_pipeline is None:
        logger.info("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º image generation pipeline...")
        clear_memory()
        try:
            # –ü–æ–∑–≤–æ–ª—è–µ–º —É–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            model_id = os.environ.get("IMAGE_GEN_MODEL_ID", "playgroundai/playground-v2.5-1024px-aesthetic")
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞
            from diffusers import DiffusionPipeline  # type: ignore[import-not-found]

            # –ü–æ–¥–±–∏—Ä–∞–µ–º dtype –∏ variant –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if device.type == "cuda":
                dtype = torch.float16
                variant = "fp16"
            elif device.type == "mps":
                # –ù–∞ MPS –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç float16/bfloat16. –í—ã–±–µ—Ä–µ–º bfloat16 –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
                dtype = torch.bfloat16 if hasattr(torch, "bfloat16") else torch.float16
                variant = None
            else:
                dtype = torch.float32
                variant = None

            try:
                if variant is not None:
                    pipe = DiffusionPipeline.from_pretrained(model_id, torch_dtype=dtype, variant=variant)
                else:
                    pipe = DiffusionPipeline.from_pretrained(model_id, torch_dtype=dtype)
            except Exception as diff_err:
                if "flux" in model_id.lower():
                    from diffusers import FluxPipeline  # type: ignore[import-not-found]

                    pipe = FluxPipeline.from_pretrained(model_id, torch_dtype=dtype)
                else:
                    raise diff_err

            try:
                pipe = pipe.to(device)
            except Exception:
                pass

            # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ VRAM, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            for method_name in (
                "enable_model_cpu_offload",
                "enable_attention_slicing",
                "enable_xformers_memory_efficient_attention",
            ):
                method = getattr(pipe, method_name, None)
                if callable(method):
                    try:
                        method()
                    except Exception:
                        pass

            image_gen_pipeline = pipe
            logger.info(f"‚úÖ Image generation pipeline –∑–∞–≥—Ä—É–∂–µ–Ω: {model_id}")
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ image generation pipeline")
            return None
    return image_gen_pipeline


def unload_pipelines() -> None:
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø–∞–π–ø–ª–∞–π–Ω—ã –∏ –æ—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å."""
    global shape_pipeline, paint_pipeline, image_gen_pipeline

    if shape_pipeline is not None:
        del shape_pipeline
        shape_pipeline = None
        logger.info("üóëÔ∏è Shape pipeline –≤—ã–≥—Ä—É–∂–µ–Ω")

    if paint_pipeline is not None:
        del paint_pipeline
        paint_pipeline = None
        logger.info("üóëÔ∏è Paint pipeline –≤—ã–≥—Ä—É–∂–µ–Ω")

    if image_gen_pipeline is not None:
        del image_gen_pipeline
        image_gen_pipeline = None
        logger.info("üóëÔ∏è Image generation pipeline –≤—ã–≥—Ä—É–∂–µ–Ω")

    clear_memory()


def resize_and_pad(
    image: Image.Image,
    target_size: tuple[int, int],
    fill_color: tuple[int, int, int] = (255, 255, 255),
) -> Image.Image:
    padded_image = Image.new("RGB", target_size, fill_color)
    image.thumbnail(target_size, Image.Resampling.LANCZOS)
    paste_position = (
        (target_size[0] - image.width) // 2,
        (target_size[1] - image.height) // 2,
    )
    padded_image.paste(image, paste_position)
    return padded_image


def generate_mesh_from_image(image_path: str, output_path: str) -> bool:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—à –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if not os.path.exists(image_path):
        logger.error(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return False

    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ—à–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    clear_memory()

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º pipeline
        pipeline = load_shape_pipeline()
        if pipeline is None:
            return False

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(image_path).convert("RGB")
        processed_image = resize_and_pad(image, (512, 512))

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        ref_image_path = os.path.splitext(output_path)[0] + ".png"
        processed_image.save(ref_image_path)
        logger.info(f"üì∏ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ref_image_path}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à...")
        mesh_untextured: Any = pipeline(image=processed_image, show_progress_bar=False)[0]
        mesh_untextured.export(output_path)
        logger.info(f"‚úÖ –ú–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

        return True

    except torch.cuda.OutOfMemoryError:
        logger.exception("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VRAM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—à–∞")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return False
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—à–∞")
        return False
    finally:
        clear_memory()


def generate_textured_mesh_from_image(
    image_path: str,
    output_path: str,
    *,
    use_remesh: bool = True,
    target_face_count: int | None = 2000,
) -> bool:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—à –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ—ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

    Args:
        image_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
        output_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É .obj/.glb, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        use_remesh: –ø–µ—Ä–µ–¥–∞—Ç—å `False`, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ/—Ä–µ–º–µ—à–∏–Ω–≥
            –≤ `Hunyuan3DPaintPipeline` –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π (–∏–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ
            —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π) –º–µ—à.
        target_face_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ
            —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–µ—à –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º.  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2000.
            –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å `None`, —É–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–º–µ—à –ø–∞–π–ø–ª–∞–π–Ω–∞ (–µ—Å–ª–∏ `use_remesh=True`).

    Returns:
        True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∏–Ω–∞—á–µ False.
    """
    if not os.path.exists(image_path):
        logger.error(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return False

    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    clear_memory()

    try:
        # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
        logger.info("üéØ –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã...")
        shape_pipe = load_shape_pipeline()
        if shape_pipe is None:
            return False

        image = Image.open(image_path).convert("RGB")
        processed_image = resize_and_pad(image, (512, 512))

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        base_path, ext = os.path.splitext(output_path)
        ref_image_path = base_path + ".png"
        processed_image.save(ref_image_path)
        logger.info(f"üì∏ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ref_image_path}")

        mesh_untextured: Any = shape_pipe(image=processed_image, show_progress_bar=False)[0]
        untextured_path = base_path + "_untextured.glb"
        mesh_untextured.export(untextured_path)
        logger.info(f"‚úÖ –ú–µ—à –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {untextured_path}")

        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—à–∞
        clear_memory()

        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
        logger.info("üé® –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É...")
        paint_pipe = load_paint_pipeline()
        if paint_pipe is None:
            logger.error("‚ùå Paint pipeline –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –º–µ—à–∞ ‚Äî –¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–æ –≤—ã–∑–æ–≤–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
        mesh_for_paint = untextured_path
        if target_face_count is not None:
            simplified_path = base_path + "_preprocessed.glb"
            try:
                simplified_path = simplify_mesh_and_rewrap(untextured_path, simplified_path, target_face_count)
                mesh_for_paint = simplified_path
                # –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —É–ø—Ä–æ—â–µ–Ω–∏–∏ –Ω–µ –Ω—É–∂–µ–Ω —Ä–µ–º–µ—à–∏–Ω–≥ –≤–Ω—É—Ç—Ä–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞
                use_remesh = False
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–æ–±–µ—Ä–Ω—É—Ç—å –º–µ—à: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º.")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª —Ä–µ–º–µ—à–∏–Ω–≥, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª —É–ø—Ä–æ—â–µ–Ω–∏–µ,
        # –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ—à–∞.  –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏
        # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è UV-–∫–∞—Ä—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π.
        elif not use_remesh:
            try:
                import trimesh  # type: ignore[import-not-found]

                mesh_uv_wrap = _try_import_mesh_uv_wrap()

                mesh_tmp: Any = trimesh.load(untextured_path)
                if callable(mesh_uv_wrap):
                    mesh_tmp = mesh_uv_wrap(mesh_tmp)  # type: ignore[misc]
                mesh_tmp.export(untextured_path)
                logger.info("üîÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ—à–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫–µ: {e}")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª .glb –∫–∞–∫ –≤—ã—Ö–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .obj –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        desired_ext = ext.lower()
        obj_output_path = base_path + ".obj"

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω —Ä–∏—Å–æ–≤–∞–Ω–∏—è. –û–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç OBJ –∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ Blender ‚Äî GLB
        output_mesh_path = paint_pipe(
            mesh_path=mesh_for_paint,
            image_path=ref_image_path,
            output_mesh_path=obj_output_path,
            use_remesh=use_remesh,
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OBJ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if not os.path.exists(obj_output_path):
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if isinstance(output_mesh_path, str) and os.path.exists(output_mesh_path):
                obj_output_path = output_mesh_path
            else:
                logger.error(f"‚ùå Paint pipeline –Ω–µ —Å–æ–∑–¥–∞–ª OBJ: {obj_output_path}. –í–æ–∑–≤—Ä–∞—Ç –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                return False

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ç–µ–∫—Å—Ç—É—Ä–∞–º –≤ OBJ
        fix_texture_paths(obj_output_path)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª .glb, –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OBJ –≤ GLB
        final_glb_path = base_path + ".glb"
        if desired_ext == ".glb":
            """
            –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OBJ –≤ GLB —á–µ—Ä–µ–∑ Blender.  –í Blender 4.0 API
            –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏–º–ø–æ—Ä—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º
            `bpy.ops.wm.obj_import`, –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π
            `bpy.ops.import_scene.obj`.  –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ Blender –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö
            fallback ‚Äî –∑–∞–¥–µ–π—Å—Ç–≤—É–µ–º trimesh.  –ï—Å–ª–∏ –∏ trimesh –Ω–µ —É–¥–∞—ë—Ç—Å—è,
            –∫–æ–ø–∏—Ä—É–µ–º OBJ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ö–æ—Ç—è –±—ã OBJ.
            """
            try:
                import bpy  # type: ignore[import-not-found]

                # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É
                bpy.ops.object.select_all(action="SELECT")
                bpy.ops.object.delete(use_global=False)

                # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OBJ.  –í Blender 4.x –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                # bpy.ops.wm.obj_import, –≤ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö ‚Äî
                # bpy.ops.import_scene.obj.  –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
                if hasattr(bpy.ops, "wm") and hasattr(bpy.ops.wm, "obj_import"):
                    bpy.ops.wm.obj_import(filepath=obj_output_path)
                else:
                    bpy.ops.import_scene.obj(filepath=obj_output_path)

                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å GLTF/GLB.  bpy.ops.export_scene.gltf
                # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –ø—É—Ç–∏.
                bpy.ops.export_scene.gltf(filepath=final_glb_path, use_active_scene=True)
                logger.info(f"‚úÖ OBJ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ GLB —á–µ—Ä–µ–∑ Blender: {final_glb_path}")
            except Exception:
                # –ï—Å–ª–∏ Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª—é–±–∞—è –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è
                # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ trimesh
                try:
                    import trimesh  # type: ignore[import-not-found]

                    mesh: Any = trimesh.load(obj_output_path)
                    mesh.export(final_glb_path)
                    logger.info(f"‚úÖ OBJ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ GLB —á–µ—Ä–µ–∑ trimesh: {final_glb_path}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OBJ –≤ GLB: {e}. –û—Å—Ç–∞–≤–ª—è–µ–º OBJ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                    import shutil

                    shutil.copy(obj_output_path, final_glb_path)

        # –°–æ–∑–¥–∞–µ–º OBJ –≤–µ—Ä—Å–∏—é —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        obj_path = obj_output_path
        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OBJ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {obj_path}")
        if desired_ext == ".glb":
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GLB —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {final_glb_path}")
        return True

    except torch.cuda.OutOfMemoryError:
        logger.exception("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VRAM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return False
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return False
    finally:
        clear_memory()


def generate_mesh_from_text(prompt: str, output_path: str) -> bool:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—à –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ—à–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
    clear_memory()

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º image generation pipeline
        img_pipe = load_image_gen_pipeline()
        if img_pipe is None:
            logger.error("‚ùå Image generation pipeline –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
        image = img_pipe(prompt=prompt).images[0]
        processed_image = resize_and_pad(image, (512, 512))

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        ref_image_path = os.path.splitext(output_path)[0] + ".png"
        processed_image.save(ref_image_path)
        logger.info(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ref_image_path}")

        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        clear_memory()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        shape_pipe = load_shape_pipeline()
        if shape_pipe is None:
            return False

        mesh_untextured: Any = shape_pipe(image=processed_image, show_progress_bar=False)[0]
        mesh_untextured.export(output_path)
        logger.info(f"‚úÖ –ú–µ—à –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

        return True

    except torch.cuda.OutOfMemoryError:
        logger.exception("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VRAM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return False
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return False
    finally:
        clear_memory()


def generate_textured_mesh_from_text(
    prompt: str,
    output_path: str,
    *,
    use_remesh: bool = True,
    target_face_count: int | None = 2000,
) -> bool:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—à –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ—ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

    Args:
        prompt: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.
        output_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É .obj/.glb –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        use_remesh: –ø–µ—Ä–µ–¥–∞—Ç—å `False`, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–º–µ—à–∏–Ω–≥ –≤–Ω—É—Ç—Ä–∏
            –ø–∞–π–ø–ª–∞–π–Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è.
        target_face_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ
            —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–µ—à –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º.  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2000.
            –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å `None`, —É–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–º–µ—à –ø–∞–π–ø–ª–∞–π–Ω–∞ (–µ—Å–ª–∏ `use_remesh=True`).

    Returns:
        True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∏–Ω–∞—á–µ False.
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
    clear_memory()

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º image generation pipeline
        img_pipe = load_image_gen_pipeline()
        if img_pipe is None:
            logger.error("‚ùå Image generation pipeline –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
        image = img_pipe(prompt=prompt).images[0]
        processed_image = resize_and_pad(image, (512, 512))

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        base_path, ext = os.path.splitext(output_path)
        ref_image_path = base_path + ".png"
        processed_image.save(ref_image_path)
        logger.info(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ref_image_path}")

        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –í—ã–≥—Ä—É–∂–∞–µ–º image_gen_pipeline, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å VRAM –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π shape-–ø–∞–π–ø–ª–∞–π–Ω–∞
        global image_gen_pipeline
        if image_gen_pipeline is not None:
            del image_gen_pipeline
            image_gen_pipeline = None
        clear_memory()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—à –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        shape_pipe = load_shape_pipeline()
        if shape_pipe is None:
            return False

        mesh_untextured: Any = shape_pipe(image=processed_image, show_progress_bar=False)[0]
        untextured_path = base_path + "_untextured.glb"
        mesh_untextured.export(untextured_path)
        logger.info(f"‚úÖ –ú–µ—à –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {untextured_path}")

        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—à–∞
        clear_memory()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
        logger.info("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É...")
        paint_pipe = load_paint_pipeline()
        if paint_pipe is None:
            logger.error("‚ùå Paint pipeline –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–æ–±—ë—Ä—Ç–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë –∑–¥–µ—Å—å
        mesh_for_paint = untextured_path
        if target_face_count is not None:
            simplified_path = base_path + "_preprocessed.glb"
            try:
                simplified_path = simplify_mesh_and_rewrap(untextured_path, simplified_path, target_face_count)
                mesh_for_paint = simplified_path
                use_remesh = False
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–æ–±–µ—Ä–Ω—É—Ç—å –º–µ—à: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º.")
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–º–µ—à–∏–Ω–≥, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª —É–ø—Ä–æ—â–µ–Ω–∏—è,
        # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ—à–∞
        elif not use_remesh:
            try:
                import trimesh  # type: ignore[import-not-found]

                mesh_uv_wrap = _try_import_mesh_uv_wrap()

                mesh_tmp: Any = trimesh.load(untextured_path)
                if callable(mesh_uv_wrap):
                    mesh_tmp = mesh_uv_wrap(mesh_tmp)  # type: ignore[misc]
                mesh_tmp.export(untextured_path)
                logger.info("üîÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ—à–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π UV-—Ä–∞–∑–≤—ë—Ä—Ç–∫–µ: {e}")

        desired_ext = ext.lower()
        obj_output_path = base_path + ".obj"
        output_mesh_path = paint_pipe(
            mesh_path=mesh_for_paint,
            image_path=ref_image_path,
            output_mesh_path=obj_output_path,
            use_remesh=use_remesh,
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OBJ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if not os.path.exists(obj_output_path):
            if isinstance(output_mesh_path, str) and os.path.exists(output_mesh_path):
                obj_output_path = output_mesh_path
            else:
                logger.error(f"‚ùå Paint pipeline –Ω–µ —Å–æ–∑–¥–∞–ª OBJ: {obj_output_path}. –í–æ–∑–≤—Ä–∞—Ç –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                return False
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ç–µ–∫—Å—Ç—É—Ä–∞–º
        fix_texture_paths(obj_output_path)

        final_glb_path = base_path + ".glb"
        if desired_ext == ".glb":
            """
            –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç OBJ –≤ GLB.  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Blender (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω);
            –Ω–∞—á–∏–Ω–∞—è —Å Blender 4.0 ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä `bpy.ops.wm.obj_import`, –≤
            —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö ‚Äî `bpy.ops.import_scene.obj`.  –í —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö
            –æ—à–∏–±–æ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Blender –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ `trimesh`, –∞ –µ—Å–ª–∏ –∏ –æ–Ω
            –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç ‚Äî –∫–æ–ø–∏—Ä—É–µ–º OBJ –∫–∞–∫ GLB.
            """
            try:
                import bpy  # type: ignore[import-not-found]

                bpy.ops.object.select_all(action="SELECT")
                bpy.ops.object.delete(use_global=False)

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OBJ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Blender
                if hasattr(bpy.ops, "wm") and hasattr(bpy.ops.wm, "obj_import"):
                    bpy.ops.wm.obj_import(filepath=obj_output_path)
                else:
                    bpy.ops.import_scene.obj(filepath=obj_output_path)

                bpy.ops.export_scene.gltf(filepath=final_glb_path, use_active_scene=True)
                logger.info(f"‚úÖ OBJ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ GLB —á–µ—Ä–µ–∑ Blender: {final_glb_path}")
            except Exception:
                try:
                    import trimesh  # type: ignore[import-not-found]

                    mesh: Any = trimesh.load(obj_output_path)
                    mesh.export(final_glb_path)
                    logger.info(f"‚úÖ OBJ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ GLB —á–µ—Ä–µ–∑ trimesh: {final_glb_path}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OBJ –≤ GLB: {e}. –û—Å—Ç–∞–≤–ª—è–µ–º OBJ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                    import shutil

                    shutil.copy(obj_output_path, final_glb_path)

        obj_path = obj_output_path
        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OBJ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {obj_path}")
        if desired_ext == ".glb":
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GLB —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {final_glb_path}")
        return True

    except torch.cuda.OutOfMemoryError:
        logger.exception("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VRAM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return False
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return False
    finally:
        clear_memory()


def fix_texture_paths(mesh_path: str):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∫ —Ç–µ–∫—Å—Ç—É—Ä–∞–º –≤ .mtl —Ñ–∞–π–ª–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã.

    –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ diffuse‚Äë—Ç–µ–∫—Å—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ `<basename>.jpg`,
    metallic ‚Äî `<basename>_metallic.jpg`, roughness ‚Äî `<basename>_roughness.jpg`.
    –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ä—è–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π diffuse‚Äë—Ç–µ–∫—Å—Ç—É—Ä—É –ª—É—á—à–µ –∏–º–µ–Ω–æ–≤–∞—Ç—å —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
    `_albedo.jpg`.  –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–∏
    –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º, –∞ —Ç–∞–∫–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç
    –∑–∞–ø–∏—Å—å `map_Kd` –≤ .mtl‚Äë—Ñ–∞–π–ª–µ.  –ö–∞—Ä—Ç—ã metallic –∏ roughness –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑
    –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    mtl_path = os.path.splitext(mesh_path)[0] + ".mtl"
    if not os.path.exists(mtl_path):
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª .mtl –Ω–µ –Ω–∞–π–¥–µ–Ω: {mtl_path}")
        return

    base_path, base_name = (
        os.path.splitext(mesh_path)[0],
        os.path.splitext(os.path.basename(mesh_path))[0],
    )

    diffuse_original = f"{base_path}.jpg"
    diffuse_albedo = f"{base_path}_albedo.jpg"

    # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è diffuse‚Äë—Ç–µ–∫—Å—Ç—É—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ albedo‚Äë–≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é
    if os.path.exists(diffuse_original) and not os.path.exists(diffuse_albedo):
        try:
            import shutil

            shutil.copy(diffuse_original, diffuse_albedo)
            logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ diffuse‚Äë—Ç–µ–∫—Å—Ç—É—Ä–∞: {diffuse_albedo}")
        except Exception:
            logger.exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å diffuse‚Äë—Ç–µ–∫—Å—Ç—É—Ä—É")

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .mtl —Ñ–∞–π–ª–∞
    try:
        with open(mtl_path) as f:
            content = f.read()
    except Exception:
        logger.exception(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {mtl_path}")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º map_Kd, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é diffuse‚Äë—Ç–µ–∫—Å—Ç—É—Ä—É (.jpg –∏–ª–∏ .png)
    for ext in (".jpg", ".png"):
        key = f"map_Kd {base_name}{ext}"
        if key in content:
            content = content.replace(key, f"map_Kd {base_name}_albedo.jpg")
            break

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open(mtl_path, "w") as f:
            f.write(content)
    except Exception:
        logger.exception(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å {mtl_path}")

    logger.info(f"‚úÖ –ü—É—Ç–∏ –∫ —Ç–µ–∫—Å—Ç—É—Ä–∞–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {mtl_path}")


def convert_glb_to_obj_with_textures(glb_path: str, obj_path: str | None = None):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç GLB —Ñ–∞–π–ª –≤ OBJ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏"""
    if obj_path is None:
        obj_path = os.path.splitext(glb_path)[0] + ".obj"

    # 1) –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Blender
    try:
        import bpy  # type: ignore[import-not-found]

        bpy.ops.object.select_all(action="SELECT")
        bpy.ops.object.delete(use_global=False)
        bpy.ops.import_scene.gltf(filepath=glb_path)
        bpy.ops.export_scene.obj(
            filepath=obj_path,
            use_selection=False,
            use_materials=True,
            use_triangles=True,
            use_normals=True,
            use_uvs=True,
        )

        base_name = os.path.splitext(os.path.basename(obj_path))[0]
        mtl_path = os.path.splitext(obj_path)[0] + ".mtl"
        mtl_content = (
            "newmtl Material\n"
            "Kd 0.8 0.8 0.8\n"
            "Ke 0.0 0.0 0.0\n"
            "Ni 1.5\n"
            "d 1.0\n"
            "illum 2\n"
            f"map_Kd {base_name}_albedo.jpg\n"
            f"map_Pm {base_name}_metallic.jpg\n"
            f"map_Pr {base_name}_roughness.jpg\n"
        )
        with open(mtl_path, "w") as f:
            f.write(mtl_content)
        logger.info("‚úÖ GLB –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ OBJ —á–µ—Ä–µ–∑ Blender: %s", obj_path)
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω .mtl —Ñ–∞–π–ª: %s", mtl_path)
        return obj_path
    except ImportError:
        logger.warning("‚ö†Ô∏è Blender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º trimesh...")
    except Exception:
        logger.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞ Blender, –ø—Ä–æ–±—É–µ–º trimesh...")

    # 2) Fallback —á–µ—Ä–µ–∑ trimesh
    try:
        import trimesh  # type: ignore[import-not-found]

        mesh: Any
        try:
            mesh = trimesh.load(glb_path)
        except Exception:
            mesh = trimesh.load(glb_path, file_type="obj")
        mesh.export(obj_path)

        base_name = os.path.splitext(os.path.basename(obj_path))[0]
        mtl_path = os.path.splitext(obj_path)[0] + ".mtl"
        mtl_content = (
            "newmtl Material\n"
            "Kd 0.8 0.8 0.8\n"
            "Ke 0.0 0.0 0.0\n"
            "Ni 1.5\n"
            "d 1.0\n"
            "illum 2\n"
            f"map_Kd {base_name}_albedo.jpg\n"
            f"map_Pm {base_name}_metallic.jpg\n"
            f"map_Pr {base_name}_roughness.jpg\n"
        )
        with open(mtl_path, "w") as f:
            f.write(mtl_content)
        logger.info("‚úÖ GLB –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ OBJ —á–µ—Ä–µ–∑ trimesh: %s", obj_path)
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω .mtl —Ñ–∞–π–ª: %s", mtl_path)
        return obj_path
    except ImportError:
        logger.warning("‚ö†Ô∏è trimesh –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        try:
            import subprocess

            subprocess.run(["uv", "add", "trimesh"], check=True)
            logger.info("‚úÖ trimesh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ trimesh")
        return None
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ trimesh")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("üöÄ Hunyuan3D-2.1 - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 60)
    print("üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é: –ê–ö–¢–ò–í–ù–û")
    print("üéÆ GPU: NVIDIA GeForce RTX 4090 (24GB VRAM)")
    print()

    while True:
        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:")
        print("1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—à–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—à–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
        print("4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
        print("5. –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
        print("6. –í—ã—Ö–æ–¥")

        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ (1-6): ").strip()

        if choice == "1":
            print("\nüìã –û–ø–µ—Ä–∞—Ü–∏—è 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—à–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            success = generate_mesh_from_image("assets/test_image.jpg", "output/test_mesh.glb")
            if success:
                print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")

        elif choice == "2":
            print("\nüìã –û–ø–µ—Ä–∞—Ü–∏—è 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            success = generate_textured_mesh_from_image("assets/test_image.jpg", "output/test_mesh_textured.glb")
            if success:
                print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")

        elif choice == "3":
            print("\nüìã –û–ø–µ—Ä–∞—Ü–∏—è 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—à–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
            prompt = "(masterpiece), (best quality), game asset, a single longsword, front view, orthographic, 3d model, 3d render, hyper detailed, clean, ((white background)), ((isolated on white)), professional, studio lighting, sharp focus"
            success = generate_mesh_from_text(prompt, "output/sword.glb")
            if success:
                print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")

        elif choice == "4":
            print("\nüìã –û–ø–µ—Ä–∞—Ü–∏—è 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
            prompt = "(masterpiece), (best quality), game asset, a single longsword, front view, orthographic, 3d model, 3d render, hyper detailed, clean, ((white background)), ((isolated on white)), professional, studio lighting, sharp focus"
            success = generate_textured_mesh_from_text(prompt, "output/sword_textured.glb")
            if success:
                print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")

        elif choice == "5":
            print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
            unload_pipelines()
            print("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")

        elif choice == "6":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()
